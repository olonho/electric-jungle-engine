package universum;

import java.net.*;
import java.nio.*;
import java.nio.channels.*;
import java.io.*;
import java.util.*;
import java.text.DateFormat;

public class ClusterClient {
    String auth, host;
    int port;
    SocketChannel sc;
    ByteBuffer buf;
    String tag;
    
    class CustomRunner extends ContestRunner {
        CustomRunner(String[] args) {
            parseArgs(args);
        }                
        public void destroy() {
            stop();
        }
    }

    ClusterClient(String server) {
        int dog = server.indexOf('@');
        int colon = server.indexOf(':');
        auth = server.substring(0, dog);
        host = server.substring(dog+1, colon);
        port = Integer.parseInt(server.substring(colon+1));       
        buf = ByteBuffer.allocate(640*1024);
    }


    private byte[] getBytes() {
        int len = buf.getInt();
        byte[] data = new byte[len];
        buf.get(data, 0, len);
        return data;
    }

    private void putString(String s) {
        int len = s.length();
        buf.putInt(len);
        for (int i=0; i<len; i++) {
            buf.putChar(s.charAt(i));
        }
    }

    private String getString() {
        int len = buf.getInt();
        char[] data = new char[len];
        for (int i=0; i<len; i++) {
            data[i] = buf.getChar();
        }
        return new String(data);
    }


    private void startPacket() {
        buf.clear();
        buf.putInt(0x12345678);
        buf.putInt(0); // size placeholder
    }

    private void endPacket() throws IOException {
        int pos = buf.position();
        buf.position(4);
        buf.putInt(pos); // fill in size
        buf.position(pos);
        buf.flip();        
    }

    void connect(String cmd, String[] args) throws IOException {
        sc = SocketChannel.open();
        sc.configureBlocking(true);       
        sc.connect(new InetSocketAddress(host, port));
        sc.finishConnect();
        
        startPacket();
        putString(auth);
        putString(cmd);
        buf.putInt(args == null ? 0 : args.length);
        if (args != null) {           
            for (String a : args) {
                putString(a);
            }
        }
        endPacket();
        sc.write(buf);
    }

    
    void doCommand(String cmd, String[] args) throws IOException {
        connect(cmd, args);
        // if server not closed connection - auth is OK
        buf.clear();
        buf.limit(8);
        int r = sc.read(buf); 
        if (r < 8) {
            throw new IOException("short read: "+r);
        }        
        buf.flip();
        int magic = buf.getInt();
        if (magic != 0x34125678) {
            throw new IOException("inconsistent magic: "+magic);
        }
        int len = buf.getInt();
        if (len < 8 || len > 635 * 1024) {
            throw new IOException("bad frame: "+len);
        }
        buf.flip();
        buf.limit(len-8);        
        int read = 8;
        do {
            r = sc.read(buf);
            if (r < 0) {
                throw new IOException("cut frame");
            }
            read += r;
        } while (read < len);
        buf.flip();

        sc.close();
    }


    String[] getConfig() throws IOException {
        doCommand("GETCONFIG", null);
        
        tag = getString();
        int count = buf.getInt();
        String[] data = new String[count];
        for (int i=0; i<count; i++) {
            data[i] = getString();
        }       
        return data;
    }


    void processDeps(String[] cfg) throws IOException {
        // ugly but must work for now
        for (int i = 0; i < cfg.length; i++) {
            String c = cfg[i];
            if ("--game-kind".equals(c)) {
                i++;
                continue;
            }
            if ("--batch".equals(c)) {
                continue;
            }
            
            if (c.startsWith("--")) {
                System.out.println("HANDLE PARAM: "+c);
            }
            if (i < cfg.length-1) {
                i++;                
                cfg[i] = getJar(cfg[i]);                
            }
        }
    }


    String getJar(String serverName) throws IOException {        
        int slash = serverName.lastIndexOf('/');
        String name = slash < 0 ? serverName : serverName.substring(slash+1);
        System.out.println("getting="+serverName+" "+" as "+name);
        doCommand("GETJAR", new String[]{serverName});
        
        byte[] data = getBytes();
        File jar = new File(name);
        
        FileOutputStream fos = new FileOutputStream(jar);
        fos.write(data);
        fos.close();
        
        String rv =  jar.getCanonicalPath();        
        pathMapper.put(rv, serverName);
        
        return rv;
    }

    Map<String, String> pathMapper = new HashMap<String, String>();

    void reportResults(String tag, CustomRunner c) throws IOException {
        String[] results = c.results();
        String[] args = new String[results.length + 4];
        int idx = 0;
        args[idx++] = tag;
	DateFormat df = 
          DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM,
                                         Locale.US);
        args[idx++] = new Integer(c.getOwner()).toString();
        args[idx++] = df.format(c.getStartTime());
        args[idx++] = df.format(c.getEndTime());
        
        for (int i=0 ; i<results.length; i+=2) {
            args[i+idx] = pathMapper.get(results[i]);
            args[i+idx+1] = results[i+1];
        }
        doCommand("RESULT", args);
    }

    int start()  {
        try {            
            String[] cfg = getConfig();
            if (tag == null) {
                throw new RuntimeException("NULL tag");
            } else if ("DONE".equals(tag)) {
                return 1;
            }
            processDeps(cfg);
            CustomRunner cr = new CustomRunner(cfg);
            cr.run();
            if (cr.waitCompletion()) {
                reportResults(tag, cr);
            } else {
                doCommand("DEAD", new String[] {tag});
            }
        } catch (Exception e) {
            e.printStackTrace();
            return 2;
        }
        return 0;
    }


    public static void main(String args[]) {
        universum.engine.JungleSecurity.setCheckSecurity(true);
        System.out.println("Secure");
        System.exit(runAsClient(args[0]));
    }

    static int runAsClient(String server) {        
        ClusterClient client = new ClusterClient(server);
        int code;
        do {
            code = client.start();
        } while (code == 0);
        return code;
    }
}
